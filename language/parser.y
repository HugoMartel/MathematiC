%{
    #include <cstdio>
    #include <cstdlib>
    #include <cstdarg>
    #include <cmath>
    #include <cstring>
    #include <string>
    #include <cfloat>
    #include <map>
    #include <queue>
    #include <stack>
    #include <vector>
    #include <iostream>

    using namespace std;//? useful ?

    extern int yylex();
    extern FILE *yyin;
    extern char *yytext;
    extern size_t yylineno;
    int yyerror(const char *s);


    #define DOUBLE dvalue
    #define STRING svalue
    #define BOOL bvalue
    #define ADDRESS adresse


    /*===================*/
    /* --    CLASS    -- */
    /*===================*/
    /**
     * Class containing a single instruction to store on the programm stack
     */
    class Instruction {
    public:
        /** Instruction code, auto generated by Bison */
        int code;
        /** Value returned by the instruction, optional */
        double value;
        /** Reference for the data table, optional */
        std::string name;
        /**
         * Constructor to create an instruction object and then store it in the programm stack
         * @param[in]   c   Code of the instruction
         * @param[in]   v   Double value returned by the instruction
         * @param[in]   n   String value returned by the instruction
         */
        Instruction(const int &c, const double &v=0, const string &n=""): code(c), value(v), name(n) {}
        /**
         * Default constructor
         */
        Instruction(): code(0), value(0), name("") {}
    };

    /**
     * Function class storing its attributes and instruction stack
     */
    class Function {
    public:
        /** Function code */
        std::vector<Instruction> code;
        /** Internal Instruction counter */
        std::map<std::string,double> parameters;
        /** Internal Instruction Counter */
        long unsigned int iic;
        /** Hex color code */
        std::string color;
        /** Display style */
        std::string style;
        /** Definition interval */
        std::pair<double,double> xInterval;

        /** Default Constructor */
        Function() {
            color = "#FF0000";
            style = "solid";
            xInterval.first = DBL_MIN;
            xInterval.second = DBL_MAX;
            iic = 0;
        }
        /**
         * Add instruction method
         * @param[in]   c   Instruction's code
         * @param[in]   v   Instruction value used in some cases
         * @param[in]   n   Instruction string value like a var name
         * @return      Error code
         */
        int add_instruction(const int &c, const double &v=0, const std::string &n="") {
            code.push_back(Instruction(c,v,n));
            ++iic;
            return 0;
        }
        /**
         * Define a parameter used in a function declaration
         * @param[in]   s   Name of the parameter
         * @param[in]   c   Code of the DECLARE instruction (since it is not known by cpp)
         * @return      Error Code
         */
        int add_param(const std::string &s, const int &c) {
            if (!parameters.count(s)) {
                    parameters[s] = 0;
                    /* c is the code number for DECLARE */
                    add_instruction(c, 0, s);
                    return EXIT_SUCCESS;
            } else {
                yyerror("Parameter already declared...");
                return -1;
            }
        }
        /**
         * Function to execute a function
         * @param[in]   args             Parameter values (double)
         * @return      Value returned by the function (double)
         */
        double operator()(...);
    };

    /* Draw function Variables */
    int functionToEdit = 0;
    std::string argLabel = "Affichage";
    double argXmin = -10;
    double argXmax = 10;
    double argYmin = -10;
    double argYmax = 10;


    /*===================*/
    /* --  FUNCTIONS  -- */
    /*===================*/
    /**
     * Convert int code to string value
     * @param[in]   ins     Instruction code
     */
    string print_code(const int &ins);

    /**
     * String storing the current code (main or function) to write to.
     * 0 -> main code, otherwise write to the associated function
     */
    std::vector<std::string> current_scope = { "" };

    /**
     * Temporary queue to store args to add to functions and draw
     */
    std::queue<std::string> argQueue;

    // Déclaration de la map qui associe
    // les noms des variables à leur valeur
    // (La table de symboles)
    std::map<std::string,double> variables;

    //  Map storing functions instructions, access them by their name (string)
    std::map<std::string,Function> functions;

    /* Map storing functions to draw */
    std::map</*name*/std::string, std::pair</*xbegin*/double, /*xend*/double>> funcsToDraw;


    int add_instruction(const int &c, const double &v=0, const string &n="") {
        /* Check where this instruction should be put */
        if (current_scope[0] == "") {
            yyerror("Writing code outside of a function...");
            ++functions[current_scope[0]].iic;
        } else {
            /* Write to the appropriated function stack */
            functions[current_scope[0]].add_instruction(c, v, n);
        }
        return 0;
    }
%}

%code requires
  {
    typedef struct adr {
        int jmp;  // adresse du jmp
        int jc;  // adrese  du jc
    } type_adresse;
  }

%union {
    double dvalue;
    char svalue[50];
    bool bvalue;
    type_adresse adresse;
}

%type <DOUBLE> expr
%type <Instruction> instruction
%type <BOOL> logic

/* Reserved words */
%token <DOUBLE> PI
%token <DOUBLE> E
%token <DOUBLE> PHI
%token var /* Variable definition */
%token DEF /* Function definition */
%token in  /* param interval for a given function */
%token arrow /* => */
%token RETURN /* return function keyword */

/* Parameters for draw */
%token <STRING> color
%token <STRING> style
%token <STRING> label
%token <DOUBLE> xmin
%token <DOUBLE> xmax
%token <DOUBLE> ymin
%token <DOUBLE> ymax
%token <STRING> COLOR_PARAM /* "#F0F0F0" or "blue" */
%token <STRING> STYLE_PARAM /* "solid", "filled", "dotted", "hist" */
%token <STRING> STRING /* "text" */

/* Functions & instructions*/
%token <DOUBLE> NUM
%token <DOUBLE> SIN
%token <DOUBLE> COS
%token <DOUBLE> POW
%token <DOUBLE> EXP
%token <STRING> VAR
%token <ADDRESS> FOR
%token <ADDRESS> IF
%token <ADDRESS> ELSE
%token <ADDRESS> WHILE
%token <DOUBLE> TAN
%token <DOUBLE> ARCCOS
%token <DOUBLE> ARCSIN
%token <DOUBLE> ARCTAN
%token <DOUBLE> COSH
%token <DOUBLE> SINH
%token <DOUBLE> TANH
%token <DOUBLE> ARCSINH
%token <DOUBLE> ARCCOSH
%token <DOUBLE> ARCTANH
%token <DOUBLE> SQRT
%token <DOUBLE> LOG
%token DRAW

/* Instruction vector defines */
%token JMP
%token JMPCOND
%token ASSIGN
%token DECLARE
%token LOAD
%token INTERV

/* Operators */
%token <DOUBLE> PLUS
%token <DOUBLE> MIN
%token <DOUBLE> TIMES
%token <DOUBLE> DIV
%token <DOUBLE> PLUS_EQUAL
%token <DOUBLE> MIN_EQUAL
%token <DOUBLE> TIMES_EQUAL
%token <DOUBLE> DIV_EQUAL

/* Logic bools */
%token <BOOL> EQUAL
%token <BOOL> NOT_EQ
%token <BOOL> INF_STRICT
%token <BOOL> SUP_STRICT
%token <BOOL> INF
%token <BOOL> SUP
%token <BOOL> AND
%token <BOOL> OR
%token <BOOL> NOT


/* Define operators priority */
%left PLUS MIN
%left TIMES DIV
%left '|' '&'
%right '^'


%%

/* Structure globale d'un programme :
    Déclarations
    Fonctions
    Affichage
*/
code: declarations fonctions affichage                  { /* TODO: print start compiling */ }


declarations: %empty /* \epsilon */                 { /* End of declarations */
                    std::cout << "-- End of declarations --\n";
 }
            | declarations var VAR '=' expr ';'     { /* Init Vars */
                if (!variables.count($3)) {
                    variables[$3] = $5;
                    add_instruction(DECLARE, 0, $3);
                    add_instruction(ASSIGN, 0, $3);
                } else {
                    yyerror("Variable already declared...");
                }
}
            | declarations var VAR ';'              {
                if (!variables.count($3)) {
                    variables[$3] = 0;
                    add_instruction(DECLARE, 0, $3);
                    add_instruction(ASSIGN, 0, $3);
                }
            }


fonctions: DEF VAR ':' '(' parameters ')' arrow '{'           {
                    /* Check if the function wasn't already declared */
                    if(!functions.count($2)) {
                        functions[$2] = Function();
                        /* Enqueue to keep it in memory */
                        current_scope.push_back($2);
                        add_instruction(DEF, 0, $2);
                        while (!argQueue.empty()) {
                            functions[$2].parameters[argQueue.front()] = 0;
                            argQueue.pop();
                        }
                    } else {
                        yyerror("Function already declared...");
                    }

}
                instruction
          '}'                                               {
                    /* Dequeue since we left the function scope */
                    if (current_scope[0] != "")
                        current_scope.pop_back();
                    /*Clear the queue in case it is not empty*/
                    while (!argQueue.empty())
                        argQueue.pop();
}
         | fonctions fonctions                          { /* Support multiple functions */ }

parameters: VAR                                         {
                    add_instruction(DECLARE, 0, $1);
                    /* Load the param in the parameters queue */
                    argQueue.push($1);
}
          | parameters ',' parameters                   { /* Support multiple parameters */ }


draw_func: VAR in '[' NUM ',' NUM ']'                   {
                    /* Load function names to send to the front-end */

                    current_scope.push_back($1);

                    /* Check if the function is already drawn or missing */
                    if (functions.count($1)){
                        funcsToDraw[$1] = std::pair<double,double>($4,$6);

                    } else {
                        yyerror("Function already drawn or missing...");
                    }


}
         | VAR                                          { current_scope.push_back($1); }
         | draw_func ',' draw_func                      { /* Support multiple ??? */ }


affichage: DRAW draw_func '{'                           {
                                                          /* On vide le scope */
                                                          while(current_scope.size()>0){
                                                            current_scope.pop_back();
                                                          }
                                                        }
                draw_args
           '}'
         | DRAW draw_func ';'                           { /* TODO: load default args */ }


draw_args: color ':' '[' color_args ']'                 { /* getting the multiples color args (or not) */ 
                                                          if(current_scope.size() == argQueue.size()){ // on vérifie qu'il y a suffisament d'arguments
                                                            functionToEdit = current_scope.size();
                                                            while (!argQueue.empty()){ // on attribue chaque argument à sa fonction
                                                              --functionToEdit;
                                                              functions[current_scope[functionToEdit]].color = argQueue.front();
                                                              argQueue.pop();
                                                            }
                                                          }
                                                        }
         | style ':' '[' style_args ']'                 { /* getting the multiples style args (or not) */ 
                                                          if(current_scope.size() == argQueue.size()){ // on vérifie qu'il y a suffisament d'arguments
                                                            functionToEdit = current_scope.size();
                                                            while (!argQueue.empty()){ // on attribue chaque argument à sa fonction 
                                                                --functionToEdit;
                                                                functions[current_scope[functionToEdit]].style = argQueue.front();
                                                                argQueue.pop();
                                                            }
                                                          }
                                                        }
         | label ':' STRING                             { argLabel = $3;}
         | xmin ':' NUM                                 { argXmin = $3; }
         | xmin ':' VAR                                 { argXmin = variables[$3]; }
         | xmax ':' NUM                                 { argXmax = $3; }
         | xmax ':' VAR                                 { argXmax = variables[$3]; }
         | ymin ':' NUM                                 { argYmin = $3; }
         | ymin ':' VAR                                 { argYmin = variables[$3]; }
         | ymax ':' NUM                                 { argYmax = $3; }
         | ymax ':' VAR                                 { argYmax = variables[$3]; }
         | draw_args ',' draw_args                      { /* Support multiple args */ }


style_args: STYLE_PARAM                                 {
                                /* Check if the value is correct */
                                if (
                                    strcmp($1,"\"solid\"") &&
                                    strcmp($1,"\"filled\"") &&
                                    strcmp($1,"\"dotted\"") &&
                                    strcmp($1,"\"hist\"")
                                ) {
                                    yyerror("Wrong style argument...");
                                } else {
                                    argQueue.push($1);
                                }
                                                        }
          | style_args ',' style_args                   { /* Support multiple style_args */ }


color_args: COLOR_PARAM                                 {  argQueue.push($1); }
          | color_args ',' color_args                   { /* Support multiple color_args */ }


instruction: %empty /* \epsilon */                      { /* No instructions left */ }
           | instruction expr ';'                       { /* new line */ }
           | instruction RETURN expr ';'                {
               /* The return instruction will jump to the main instruction (out of function) */
               add_instruction(JMP, -1);
            }
           | IF logic '{'                               {

                // Je sauvegarde l'endroit actuel pour revenir mofifier l'adresse
                // lorsqu'elle sera connue (celle du JC)

                $1.jc = functions[current_scope[0]].iic;
                add_instruction(JMPCOND);
}
            instruction                                 {
                // Je sauvegarde l'endroit actuel pour revenir mofifier l'adresse
                // lorsqu'elle sera connue (celle du JMP)

                $1.jmp = functions[current_scope[0]].iic;
                add_instruction(JMP);

                // Je mets à jour l'adresse du saut conditionnel
                functions[current_scope[0]].code[$1.jc].value = functions[current_scope[0]].iic;
}
             '}' ELSE '{'
            instruction
             '}'                                        {
                // Je mets à jour l'adresse du saut inconditionnel
                 functions[current_scope[0]].code[$1.jmp].value = functions[current_scope[0]].iic;
}
           | FOR VAR in '[' expr ':' expr ':' expr ']' '{'
                instruction
             '}'                                        { add_instruction(FOR); }
           | WHILE logic '{'                            {
                                                $1.jc = functions[current_scope[0]].iic;
                                                add_instruction(JMPCOND);
                                                        }
                instruction
             '}'                                        { add_instruction(WHILE); }


logic: expr SUP expr        { add_instruction(SUP); }
     | expr INF expr        { add_instruction(INF); }
     | expr SUP_STRICT expr { add_instruction(SUP_STRICT); }
     | expr INF_STRICT expr { add_instruction(INF_STRICT); }
     | expr EQUAL expr      { add_instruction(EQUAL); }
     | expr NOT_EQ expr     { add_instruction(NOT_EQ); }
     | expr AND expr        { add_instruction(AND); }
     | expr OR expr         { add_instruction(OR); }
     | NOT logic            { add_instruction(NOT); }


expr: NUM                   { add_instruction(NUM, $1); }
    | PI                    { add_instruction(NUM, 3.14159265358979323846); }
    | E                     { add_instruction(NUM, 2.71828182845904523536); }
    | PHI                   { add_instruction(NUM, 1.61803398874989484820); }
    | SIN '(' expr ')'      { add_instruction(SIN); }
    | COS '(' expr ')'      { add_instruction(COS); }
    | TAN '(' expr ')'      { add_instruction(TAN); }
    | ARCCOS '(' expr ')'   { add_instruction(ARCCOS); }
    | ARCSIN '(' expr ')'   { add_instruction(ARCSIN); }
    | ARCTAN '(' expr ')'   { add_instruction(ARCTAN); }
    | SINH '(' expr ')'     { add_instruction(SINH); }
    | COSH '(' expr ')'     { add_instruction(COSH); }
    | TANH '(' expr ')'     { add_instruction(TANH); }
    | ARCCOSH '(' expr ')'  { add_instruction(ARCCOSH); }
    | ARCSINH '(' expr ')'  { add_instruction(ARCSINH); }
    | ARCTANH '(' expr ')'  { add_instruction(ARCTANH); }
    | '(' expr ')'          { $$ = $2; }
    | expr PLUS expr        { add_instruction(PLUS); }
    | expr MIN expr         { add_instruction(MIN); }
    | expr TIMES expr       { add_instruction(TIMES); }
    | expr DIV expr         { add_instruction(DIV); }
    | expr '&' expr         {
        int tmp1 = (int)$1;
        int tmp2 = (int)$3;
        $$ = tmp1 & tmp2;
        printf("%d & %d = %d\n", tmp1, tmp2, (int)$$);
}
    | expr '|' expr         {
        int tmp1 = (int)$1;
        int tmp2 = (int)$3;
        $$ = tmp1 | tmp2;
        printf("%d | %d = %d\n", tmp1, tmp2, (int)$$);
}
    | expr '^' expr                 { add_instruction(POW); }
    | POW '(' expr ',' expr ')'     { add_instruction(POW); }
    | EXP '(' expr ')'              { add_instruction(EXP); }
    | LOG '(' expr ')'              { add_instruction(LOG); }
    | SQRT '(' expr ')'             { add_instruction(SQRT); }
    | VAR                           {
                                        /* Only add to the vector if we are in a function */
                                        if (current_scope[0] != ""){
                                            add_instruction(VAR, 0, $1);
                                        }
                                    }
    | VAR '=' expr                  { add_instruction(ASSIGN,0,$1); }
    | VAR PLUS_EQUAL expr           { add_instruction(VAR,0,$1); add_instruction(PLUS); add_instruction(ASSIGN,0,$1); }
    | VAR MIN_EQUAL expr            { add_instruction(VAR,0,$1); add_instruction(MIN); add_instruction(ASSIGN,0,$1); }
    | VAR TIMES_EQUAL expr          { add_instruction(VAR,0,$1); add_instruction(TIMES); add_instruction(ASSIGN,0,$1); }
    | VAR DIV_EQUAL expr            { add_instruction(VAR,0,$1); add_instruction(DIV); add_instruction(ASSIGN,0,$1); }

%%


/*================================================================================================*/
int yyerror(const char *s)
{
    printf("%zu - %s : %s\n", yylineno, s, yytext);
    return EXIT_SUCCESS;
}


 /*================================================================================================*/
string print_code(const int &ins) {
    switch (ins) {
        /* Blocks */
        case IF             : return "IF";
        case ELSE           : return "ELSE";
        case FOR            : return "FOR";
        case WHILE          : return "WHILE";
        /* Operators */
        case PLUS           : return "+";
        case MIN            : return "-";
        case TIMES          : return "*";
        case DIV            : return "/";
        /* Logic */
        case SUP            : return "SUP";
        case INF            : return "INF";
        case SUP_STRICT     : return "SUP_ST";
        case INF_STRICT     : return "INF_ST";
        case EQUAL          : return "EQUAL";
        case NOT_EQ         : return "NOT_EQ";
        case AND            : return "AND";
        case OR             : return "OR";
        case NOT            : return "NOT";
        /* Literal */
        case NUM            : return "NUM";
        /* Functions */
        case SIN            : return "SIN";
        case COS            : return "COS";
        case TAN            : return "TAN";
        case ARCCOS         : return "ARCCOS";
        case ARCSIN         : return "ARCSIN";
        case ARCTAN         : return "ARCTAN";
        case SINH           : return "SINH";
        case COSH           : return "COSH";
        case TANH           : return "TANH";
        case ARCCOSH        : return "ARCCOSH";
        case ARCSINH        : return "ARCSINH";
        case ARCTANH        : return "ARCTANH";
        case POW            : return "POW";
        case EXP            : return "EXP";
        case LOG            : return "LOG";
        case SQRT           : return "SQRT";
        case VAR            : return "VAR";
        /* Adress Instructions */
        case DEF            : return "DEF";
        case JMP            : return "JMP";
        case JMPCOND        : return "JC ";
        case LOAD           : return "LOAD";
        case INTERV         : return "INTERV";
        /* Variables Instructions */
        case ASSIGN         : return "ASSIGN";
        case DECLARE        : return "DECLARE";
        /*---------------------------------*/
        default : return "";
    }
}


/*================================================================================================*/
double Function::operator()(...)
{
    /* INIT */
    stack<int> pile;
    va_list params;
    long unsigned int ic = 0;  /* Instruction Counter */
    double r1, r2;  /* double registers */
    std::string r3; /* string register */
    Instruction ins; /* Current instruction */

    /* Load parameters values */
    va_start(params, NULL);/* init the arg list after variables */

    for (auto &paramValue :this->parameters) {
        paramValue.second = va_arg(params, double);
    }

    va_end(params);


    printf("\n------- Exécution du programme ---------\n");

    /* Run the Function code */
    while (ic < code.size()) { /* While the ic hasn't reached the end */
          ins = code[ic];
          std::vector<std::string> current_functions;

          switch (ins.code) {
            case PLUS:
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1+r2);
                ++ic;
                break;

            case DIV:
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1/r2);
                ++ic;
              break;

            case MIN:
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1-r2);
                ++ic;
              break;

            case TIMES:
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1*r2);
                ++ic;
              break;

            case SUP:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1>r2);
                ++ic;
              break;

            case INF:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1<r2);
                ++ic;
              break;

            case SUP_STRICT:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1>=r2);
                ++ic;
              break;

            case INF_STRICT:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1<=r2);
                ++ic;
              break;

            case EQUAL:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1==r2);
                ++ic;
              break;

            case NOT_EQ:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1!=r2);
                ++ic;
              break;

            case AND:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1 && r2);
                ++ic;
              break;

            case OR:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(r1 || r2);
                ++ic;
              break;

            case NOT:
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(!r1);
                ++ic;
              break;

            case NUM:   // pour un nombre, on empile
                pile.push(ins.value);
                ++ic;
              break;

            case COS: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::cos(r1));
                ++ic;
              break;

            case SIN: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::sin(r1));
                ++ic;
              break;

            case TAN: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::tan(r1));
                ++ic;
              break;

            case COSH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::cosh(r1));
                ++ic;
              break;

            case SINH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::sinh(r1));
                ++ic;
              break;

            case TANH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::tanh(r1));
                ++ic;
              break;

            case ARCCOS: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::acos(r1));
                ++ic;
              break;

            case ARCSIN: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::asin(r1));
                ++ic;
              break;

            case ARCTAN: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::atan(r1));
                ++ic;
              break;

            case ARCCOSH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::acosh(r1));
                ++ic;
              break;

            case ARCSINH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::asinh(r1));
                ++ic;
              break;

            case ARCTANH: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::atanh(r1));
                ++ic;
              break;

            case POW: // pour un cos
                 r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                r2 = pile.top();    // Récupérer la tête de pile;
                pile.pop();

                pile.push(std::pow(r1, r2));
                ++ic;
              break;

            case EXP: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::exp(r1));
                ++ic;
              break;

            case LOG: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::log(r1));
                ++ic;
              break;

            case SQRT: // pour un cos
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                pile.push(std::sqrt(r1));
                ++ic;
              break;

            case JMP:
                // je récupère l'adresse à partir de la table
                ic = ins.value;
              break;

            case JMPCOND:
                 r1 = pile.top();    // Récupérer la tête de pile;
                 pile.pop();
                 if (r1)
                    ++ic;
                 else
                    ic = (int)ins.value;
              break;

            case LOAD:
                 current_functions.push_back(ins.name);
                 ++ic;
              break;

            case INTERV:
                /* check if r1 < r2 */
                if (r1 < r2) {
                    /* add the interval to the appropriate function */
                    functions[ins.name].xInterval.first = r1;
                    functions[ins.name].xInterval.second = r2;
                } else {
                    yyerror("Bad interval values...");
                }
                ++ic;
             break;

            case ASSIGN:
                r1 = pile.top();    // Récupérer la tête de pile;
                pile.pop();
                variables[ins.name] = r1;
                ++ic;
                break;

            case DECLARE:           // Create the variable entry in the variables map
                if (!variables.count(ins.name)) {
                    variables[ins.name] = 0;
                } else {
                    yyerror(("Variable " + ins.name + " has already been declared...").c_str());
                }

                ++ic;

                break;

            case VAR:    // je consulte la table de symbole et j'empile la valeur de la variable
                 // Si elle existe bien sur...
                try {
                    pile.push(variables.at(ins.name));
                    ++ic;
                }
              catch(...) {
                    variables[ins.name] = 0;
                    pile.push(variables.at(ins.name));
                    ++ic;
                }
                break;

        }
    }

    /* return the last value contained in the stack */
    return pile.top();
}

/*
    MAIN
*/
int main(int argc, char* argv[])
{
    /* Check file input */
    if (argc > 1) {
        yyin = fopen(argv[1], "r");

        if (!yyin) {
            std::cerr << "Error opening the provided file... (" << argv[1] << ")\n";
            return 1;
        }

        /* Analyse the code */
        yyparse();

        if (fclose(yyin)) {
            std::cerr << "Couldn't close the opened file...\n";
            return 2;
        }
    } else {
        std::cerr << "No input file given...\n";
        return -1;
    }

    /* DEBUG */

    /* Print function map */
    std::cout << "\nFunctions:\n";
    for (auto it = functions.begin(); it != functions.end(); ++it) {
        std::cout << it->first << ": ( ";
        for (auto it2 = it->second.parameters.begin(); it2 != it->second.parameters.end(); ++it2) {
            std::cout << it2->first << " ";
        }
        std::cout << ") => {" <<
            "\n\tcolor: " << it->second.color <<
            "\n\tstyle: " << it->second.style <<
            "\n\t[ " << it->second.xInterval.first << ", " << it->second.xInterval.second << " ]" <<
            "\n}\n";

        std::cout << "CODE:\n";
        /* Print the generated code */
        std::cout << "i\tCode\tValue\tName\n";
        for (size_t i = 0; i < it->second.code.size(); ++i) {
            Instruction ins = it->second.code[i];
            std::cout << i
             << '\t'
             << print_code(ins.code)
             << '\t'
             << ins.value
             << '\t'
             << ins.name
             << std::endl;
        }
    }

    /* FUNCTION TEST */
    std::cout << "g(3) = " << functions["g"](3) << "\n";
    std::cout << "fonction1(4) = " << functions["fonction1"](5.4) << "\n";


    return EXIT_SUCCESS;
}

/**
 * Compile the code to generate the functions to then use to draw
 * @param[in]   filename    file to open to read the code from
 */
int compileCode(const char *filename)
{
    yyin = fopen(filename, "r");

    if (!yyin) {
        fprintf(stderr, "Error opening the provided file... (%s)\n", filename);
        return 1;
    }

    /* Analyse the code */
    yyparse();

    if (fclose(yyin)) {
        fprintf(stderr, "Couldn't close the opened file...\n");
        return 2;
    }

    return EXIT_SUCCESS;
}
